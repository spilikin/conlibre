package de.gematik.ws.conn.signatureservice.wsdl.v7_4;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.3.6
 * 2020-05-02T19:08:19.231+02:00
 * Generated source version: 3.3.6
 *
 */
@WebServiceClient(name = "SignatureService",
                  wsdlLocation = "classpath:META-INF/wsdl/api-telematik/conn/SignatureService.wsdl",
                  targetNamespace = "http://ws.gematik.de/conn/SignatureService/WSDL/v7.4")
public class SignatureService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://ws.gematik.de/conn/SignatureService/WSDL/v7.4", "SignatureService");
    public final static QName SignatureServicePort = new QName("http://ws.gematik.de/conn/SignatureService/WSDL/v7.4", "SignatureServicePort");
    static {
        URL url = SignatureService.class.getClassLoader().getResource("META-INF/wsdl/api-telematik/conn/SignatureService.wsdl");
        if (url == null) {
            java.util.logging.Logger.getLogger(SignatureService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "classpath:META-INF/wsdl/api-telematik/conn/SignatureService.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public SignatureService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public SignatureService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SignatureService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public SignatureService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public SignatureService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public SignatureService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns SignatureServicePortType
     */
    @WebEndpoint(name = "SignatureServicePort")
    public SignatureServicePortType getSignatureServicePort() {
        return super.getPort(SignatureServicePort, SignatureServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SignatureServicePortType
     */
    @WebEndpoint(name = "SignatureServicePort")
    public SignatureServicePortType getSignatureServicePort(WebServiceFeature... features) {
        return super.getPort(SignatureServicePort, SignatureServicePortType.class, features);
    }

}
