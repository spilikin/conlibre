package de.gematik.ws.conn.encryptionservice.wsdl.v6_1;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.3.6
 * 2020-05-02T19:08:15.387+02:00
 * Generated source version: 3.3.6
 *
 */
@WebServiceClient(name = "EncryptionService",
                  wsdlLocation = "classpath:META-INF/wsdl/api-telematik/conn/EncryptionService.wsdl",
                  targetNamespace = "http://ws.gematik.de/conn/EncryptionService/WSDL/v6.1")
public class EncryptionService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://ws.gematik.de/conn/EncryptionService/WSDL/v6.1", "EncryptionService");
    public final static QName EncryptionServicePort = new QName("http://ws.gematik.de/conn/EncryptionService/WSDL/v6.1", "EncryptionServicePort");
    static {
        URL url = EncryptionService.class.getClassLoader().getResource("META-INF/wsdl/api-telematik/conn/EncryptionService.wsdl");
        if (url == null) {
            java.util.logging.Logger.getLogger(EncryptionService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "classpath:META-INF/wsdl/api-telematik/conn/EncryptionService.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public EncryptionService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public EncryptionService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public EncryptionService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public EncryptionService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public EncryptionService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public EncryptionService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns EncryptionServicePortType
     */
    @WebEndpoint(name = "EncryptionServicePort")
    public EncryptionServicePortType getEncryptionServicePort() {
        return super.getPort(EncryptionServicePort, EncryptionServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns EncryptionServicePortType
     */
    @WebEndpoint(name = "EncryptionServicePort")
    public EncryptionServicePortType getEncryptionServicePort(WebServiceFeature... features) {
        return super.getPort(EncryptionServicePort, EncryptionServicePortType.class, features);
    }

}
