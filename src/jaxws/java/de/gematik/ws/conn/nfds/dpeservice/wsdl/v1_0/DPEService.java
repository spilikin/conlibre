package de.gematik.ws.conn.nfds.dpeservice.wsdl.v1_0;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.3.6
 * 2020-05-02T19:08:22.843+02:00
 * Generated source version: 3.3.6
 *
 */
@WebServiceClient(name = "DPEService",
                  wsdlLocation = "classpath:META-INF/wsdl/api-telematik/conn/nfds/DPEService.wsdl",
                  targetNamespace = "http://ws.gematik.de/conn/nfds/DPEService/WSDL/v1.0")
public class DPEService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://ws.gematik.de/conn/nfds/DPEService/WSDL/v1.0", "DPEService");
    public final static QName DPEServicePort = new QName("http://ws.gematik.de/conn/nfds/DPEService/WSDL/v1.0", "DPEServicePort");
    static {
        URL url = DPEService.class.getClassLoader().getResource("META-INF/wsdl/api-telematik/conn/nfds/DPEService.wsdl");
        if (url == null) {
            java.util.logging.Logger.getLogger(DPEService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "classpath:META-INF/wsdl/api-telematik/conn/nfds/DPEService.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public DPEService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public DPEService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public DPEService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public DPEService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public DPEService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public DPEService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns DPEServicePortType
     */
    @WebEndpoint(name = "DPEServicePort")
    public DPEServicePortType getDPEServicePort() {
        return super.getPort(DPEServicePort, DPEServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DPEServicePortType
     */
    @WebEndpoint(name = "DPEServicePort")
    public DPEServicePortType getDPEServicePort(WebServiceFeature... features) {
        return super.getPort(DPEServicePort, DPEServicePortType.class, features);
    }

}
